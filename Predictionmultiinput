from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM


def predictionMul(trainingx,trainingy,testingx,testingy,open):# be careful, you need to reshape the input, LSTM needs reshape testingx and trainingx
# with np.reshape(testingx,(n,1,k)
  model = Sequential()
  model.add(LSTM(500, input_shape=(1,k),activation='linear'))#k is the number of var(t-1)... you need for your model
  model.add(Dense(500,activation='linear'))
  model.add(Dense(1))
  model.compile(loss='mae', optimizer='adam')
  model.fit(trainingx, trainingy, epochs=1000, batch_size=1, verbose=2, shuffle=False)
  trainScore = model.evaluate(trainingx, trainingy, verbose=0)
  print('Train Score: %.2f MSE (%.2f RMSE)' % (trainScore, math.sqrt(trainScore)))
  testScore = model.evaluate(testingx, testingy, verbose=0)
  print('Test Score: %.2f MSE (%.2f RMSE)' % (testScore, math.sqrt(testScore)))
  testPredict = model.predict(testingx)
  n=len(testPredict)
  m=len(dates)
  testPredictPlot = np.zeros(len(testPredict))
  for i in range (len(testPredict)):
    testPredictPlot[i]=testPredict[i]
  plt.plot(dates[m-n:],open[m-n:])
  plt.plot(dates[m-n:],testPredictPlot)
  plt.show()

# convert series to supervised learning that you will use as input in the predictionMul function
def series_to_supervised(data, n_in=1, n_out=1,dropnan=True): # you can modify n_in and out to have more variable at the time t-... or t+...
	n_vars = 1 if type(data) is list else data.shape[1]
	df = DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(df.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(df.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = concat(cols, axis=1)
	agg.columns = names
  #drop rows with NaN values
	if dropnan:
		agg.dropna(inplace=True)
	return agg
