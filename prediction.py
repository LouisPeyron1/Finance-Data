# -*- coding: utf-8 -*-
"""Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BuROyLF3eo-urnDruQV6Z9BpY3Ofc47o
"""

from keras.models import Sequential
from keras.layers.core import Dense, Activation, Dropout
from keras.layers import LSTM, BatchNormalization
from tensorflow.python.keras.initializers import RandomUniform
import numpy as np
from pandas import Series, DataFrame, Panel
pd.set_option('display.max_rows',15)
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import load_digits
from matplotlib import pyplot as plt
from sklearn.decomposition import TruncatedSVD
float_formatter = lambda x: "%.2f" % x
np.set_printoptions(formatter={'float_kind':float_formatter})
from sklearn.ensemble import RandomForestClassifier
import csv
import pandas as pd
from scipy import linalg
from numpy import *

def prediction(value):
  train,test=createtrain(value)
  TrainX,TrainY=create_dataset(train,look_back=1)
  TestX,TestY=create_dataset(test)
  model = Sequential()
  model.add(Dense(24, input_shape=(2,), activation="linear"))
  model.add(Dense(12, activation="linear"))
  model.add(Dense(1, activation="linear"))
  model.compile(loss='mean_squared_error', optimizer='adam')
  model.fit(TrainX, TrainY, epochs=1000, batch_size=4, verbose=4)
  trainScore = model.evaluate(TrainX, TrainY, verbose=0)
  print('Train Score: %.2f MSE (%.2f RMSE)' % (trainScore, math.sqrt(trainScore)))
  testScore = model.evaluate(TestX, TestY, verbose=0)
  print('Test Score: %.2f MSE (%.2f RMSE)' % (testScore, math.sqrt(testScore)))
  testPredict = model.predict(TestX)
  testPredictPlot = np.zeros(115)
  for i in range (0,115):
    testPredictPlot[i]=testPredict[i]+15
  plt.plot(dates[343:458],value.open[343:458])
  plt.plot(dates[343:458],testPredictPlot)
  plt.show()

def createtrain(value):
  train_size = int(len(value.open) * 0.75)
  test_size = len(value.open) - train_size
  train=value[0:train_size]
  test=value[train_size:len(value)]
  return train,test

def timeseriesanalysis(open,news,volume,volatility ):
  dates = pd.date_range('2010-01-03', periods=458, freq='W')
  valueW=Series(open,index=dates)
  NvalueW=Series(news,index=dates)
  VvalueW=Series(volatility ,index=dates)
  VolvalueW=Series(volume,index=dates)
  value = DataFrame({'open' : valueW, 'volatility' : VvalueW, 'volume':VolvalueW, 'news':NvalueW})
  value.plot(subplots=True)
  value.describe()
  value.corr()
  value['open'].rolling(window=12, center=False).mean().plot(style='-g')
  value.open.rolling(window=12).corr(other=value.news).plot(style='-g')
  value.open.rolling(window=12).corr(other=value.volatility).plot(style='-g')
  value.open.rolling(window=12).corr(other=value.volume).plot(style='-g')

def create_dataset(dataset, look_back=1):
  n=len(dataset)
  dataY=np.zeros(n)
  dataX=np.zeros(shape=(n,2))
  dataY=dataset.iloc[:,[0]]
  dataX=dataset.iloc[:,[1,3]]
  return numpy.array(dataX), numpy.array(dataY)